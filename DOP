ORG	0x58D
addr:	WORD	0x700
count:	WORD	0
counter:	WORD	0
i:	WORD	0
buff:	WORD	0
START:	CLA
	ST	count
	ST	counter
	ST	i
	JUMP	SIZE
resize:	LD	(addr)
	ASL
	ASL
	ASL
	ASL
SIZE:	IN	1D
	AND	#0x40
	BEQ	SIZE
	IN	1C
	CMP	#0xF
	BEQ	continue
	ST	(addr)
	JUMP	resize
continue:	LD	(addr)
	PUSH
	CALL	$TRS
	POP
	ST	(addr)+
	INC
	ST	count
	LD	addr
	ST	i
	DEC
	ST	addr
TYPE:	LOOP	count
	JUMP	F
	JUMP	EXIT
F:	IN	5
	AND	#0x40
	BEQ	F
	IN	4
	ST	buff
	LD	counter
	INC
	ST	counter
	ROR
	BCS	ODD
	BCC	EVEN
ODD:	LD	buff
	ST	(i)
	CLA
	JUMP	TYPE
EVEN:	LD	buff
	SWAB
	OR	(i)
	ST	(i)+
	CLA
	JUMP	TYPE
EXIT:	HLT
TRS:	LD	(SP+1)
	AND	unit_filter
	INC
	ST	trs_buffer
	CLA
	ST	ac_buffer
incing:	LOOP	trs_buffer
	JUMP	incingo
	JUMP	noincing
incingo:	LD	ac_buffer
	INC
	ST	ac_buffer
	JUMP	incing
noincing:	LD	ac_buffer
	ST	res
	LD	(SP+1)
	AND	ten_filter
	ASR
	ASR
	ASR
	ASR
	ST	trs_buffer
	ASL
	ASL
	ASL
	ADD	trs_buffer
	ADD	trs_buffer
	INC
	ST	trs_buffer
incing1:	LOOP	trs_buffer
	JUMP	incing11
	JUMP	noincing1
incing11:	LD	ac_buffer
	INC
	ST	ac_buffer
	JUMP	incing1
noincing1:	LD	ac_buffer
	ST	res
	LD	(SP+1)
	AND	hund_filter
	ST	trs_buffer
	ASR
	ASR
	ASR
	ST	(SP+1)
	ASR
	ST	trs_buffer
	ASR
	ASR
	ADD	trs_buffer
	ADD	(SP+1)
	INC
	ST	trs_buffer
incing2:	LOOP	trs_buffer
	JUMP	incing22
	JUMP	noincing2
incing22:	LD	ac_buffer
	INC
	ST	ac_buffer
	JUMP	incing2
noincing2:	LD	ac_buffer
	ST	res
	ST	(SP+1)
	RET	
unit_filter:	WORD	000F
ten_filter:	WORD	00F0
hund_filter:	WORD	0F00
trs_buffer:	WORD	0
ac_buffer:	WORD	0
res:	WORD	0